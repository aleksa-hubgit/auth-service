// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package data

import (
	"context"
)

const createToken = `-- name: CreateToken :one
INSERT INTO tokens (
  tokenString, username
) VALUES (
  $1, $2
)
RETURNING id, tokenstring, username
`

type CreateTokenParams struct {
	Tokenstring string
	Username    string
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Token, error) {
	row := q.db.QueryRow(ctx, createToken, arg.Tokenstring, arg.Username)
	var i Token
	err := row.Scan(&i.ID, &i.Tokenstring, &i.Username)
	return i, err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM tokens
WHERE id = $1
`

func (q *Queries) DeleteToken(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteToken, id)
	return err
}

const getTokenByUsername = `-- name: GetTokenByUsername :one
SELECT id, tokenstring, username FROM tokens
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetTokenByUsername(ctx context.Context, username string) (Token, error) {
	row := q.db.QueryRow(ctx, getTokenByUsername, username)
	var i Token
	err := row.Scan(&i.ID, &i.Tokenstring, &i.Username)
	return i, err
}

const listTokens = `-- name: ListTokens :many
SELECT id, tokenstring, username FROM tokens
ORDER BY username
`

func (q *Queries) ListTokens(ctx context.Context) ([]Token, error) {
	rows, err := q.db.Query(ctx, listTokens)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Token
	for rows.Next() {
		var i Token
		if err := rows.Scan(&i.ID, &i.Tokenstring, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateToken = `-- name: UpdateToken :exec
UPDATE tokens
  set tokenString = $2,
  username = $3
WHERE id = $1
`

type UpdateTokenParams struct {
	ID          int32
	Tokenstring string
	Username    string
}

func (q *Queries) UpdateToken(ctx context.Context, arg UpdateTokenParams) error {
	_, err := q.db.Exec(ctx, updateToken, arg.ID, arg.Tokenstring, arg.Username)
	return err
}
